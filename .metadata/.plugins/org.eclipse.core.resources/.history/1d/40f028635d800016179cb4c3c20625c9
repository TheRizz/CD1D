/*************************************************************************
 * AUTHOR		: Ryan Martinez
 * STUDENT ID	: 389657
 * Assignment	: 2
 * CLASS		: CS1D
 * SECTION		: MW: 3:30 PM
 * DUE DATE		: 9/19/2016
 ************************************************************************/
#include "header.h"
#include "Queue.h"
#include "CircularExtendableArray.h"
#include "newVector.h"

void Test_One(newQueue<string> tester);


/*************************************************************************
 * Assignment 3
 * _______________________________________________________________________
 * Part A of this program implements a queue interface with a wrapper of a
 * doubly linked list class. With the wrapper, the code tests functions
 * size, empty, front, enqueue, and dequeue.
 * _______________________________________________________________________
 *
 ************************************************************************/

int main()
{

	//---------------------------------------------------------------------

	newQueue <string> strQueue;

	//---------------------------------------------------------------------

	// This function will output the class header to the console
	ClassHeader();

	Test_One(strQueue);

	return 0;
}

void Test_One(newQueue<string> tester)
{
	cout << "This is a test of the queue wrapper:\n";
	cout << "The queue contains " << tester.size() << " items\n";
	if(tester.empty())
	{
		cout << "The queue is empty\n";
	}
	else
	{
		cout << "The queue is not empty\n";
	}

	tester.enqueue("A man, a plan, a canal, Panama");
	cout << "A man, a plan, a canal, Panama" << " has been added to the queue\n";
	cout << "The queue contains " << tester.size() << " items\n";
	if(tester.empty())
	{
		cout << "The queue is empty\n";
	}
	else
	{
		cout << "The queue is not empty\n";
	}

	cout << tester.front() << " is at the front of the queue" << endl;

	tester.enqueue("Was it a car or a cat I saw?");
	cout << tester.size() << endl;
	tester.enqueue("Sit on a potato pan, Otis");
	tester.enqueue("No lemon, no melon");
	tester.dequeue();
	cout << tester.front() << endl;
	tester.dequeue();
	tester.dequeue();
	cout << tester.front() << endl << tester.size() << endl;
}


